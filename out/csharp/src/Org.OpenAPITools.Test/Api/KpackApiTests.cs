/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing KpackApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class KpackApiTests
    {
        private KpackApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new KpackApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of KpackApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' KpackApi
            //Assert.IsInstanceOf(typeof(KpackApi), instance);
        }

        
        /// <summary>
        /// Test CreateBuild
        /// </summary>
        [Test]
        public void CreateBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //KpackBuildV1alpha1Build body = null;
            //string pretty = null;
            //var response = instance.CreateBuild(_namespace, body, pretty);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Build), response, "response is KpackBuildV1alpha1Build");
        }
        
        /// <summary>
        /// Test CreateBuilder
        /// </summary>
        [Test]
        public void CreateBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //KpackBuildV1alpha1Builder body = null;
            //string pretty = null;
            //var response = instance.CreateBuilder(_namespace, body, pretty);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Builder), response, "response is KpackBuildV1alpha1Builder");
        }
        
        /// <summary>
        /// Test CreateClusterBuilder
        /// </summary>
        [Test]
        public void CreateClusterBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KpackBuildV1alpha1ClusterBuilder body = null;
            //string pretty = null;
            //var response = instance.CreateClusterBuilder(body, pretty);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterBuilder), response, "response is KpackBuildV1alpha1ClusterBuilder");
        }
        
        /// <summary>
        /// Test CreateClusterStack
        /// </summary>
        [Test]
        public void CreateClusterStackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KpackBuildV1alpha1ClusterStack body = null;
            //string pretty = null;
            //var response = instance.CreateClusterStack(body, pretty);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStack), response, "response is KpackBuildV1alpha1ClusterStack");
        }
        
        /// <summary>
        /// Test CreateClusterStore
        /// </summary>
        [Test]
        public void CreateClusterStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KpackBuildV1alpha1ClusterStore body = null;
            //string pretty = null;
            //var response = instance.CreateClusterStore(body, pretty);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStore), response, "response is KpackBuildV1alpha1ClusterStore");
        }
        
        /// <summary>
        /// Test CreateImage
        /// </summary>
        [Test]
        public void CreateImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //KpackBuildV1alpha1Image body = null;
            //string pretty = null;
            //var response = instance.CreateImage(_namespace, body, pretty);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Image), response, "response is KpackBuildV1alpha1Image");
        }
        
        /// <summary>
        /// Test CreateSourceResolver
        /// </summary>
        [Test]
        public void CreateSourceResolverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //KpackBuildV1alpha1SourceResolver body = null;
            //string pretty = null;
            //var response = instance.CreateSourceResolver(_namespace, body, pretty);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolver), response, "response is KpackBuildV1alpha1SourceResolver");
        }
        
        /// <summary>
        /// Test DeleteBuild
        /// </summary>
        [Test]
        public void DeleteBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
            //var response = instance.DeleteBuild(_namespace, name, gracePeriodSeconds, orphanDependents, propagationPolicy, body);
            //Assert.IsInstanceOf(typeof(IoK8sApimachineryPkgApisMetaV1Status), response, "response is IoK8sApimachineryPkgApisMetaV1Status");
        }
        
        /// <summary>
        /// Test DeleteBuilder
        /// </summary>
        [Test]
        public void DeleteBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
            //var response = instance.DeleteBuilder(_namespace, name, gracePeriodSeconds, orphanDependents, propagationPolicy, body);
            //Assert.IsInstanceOf(typeof(IoK8sApimachineryPkgApisMetaV1Status), response, "response is IoK8sApimachineryPkgApisMetaV1Status");
        }
        
        /// <summary>
        /// Test DeleteClusterBuilder
        /// </summary>
        [Test]
        public void DeleteClusterBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
            //var response = instance.DeleteClusterBuilder(name, gracePeriodSeconds, orphanDependents, propagationPolicy, body);
            //Assert.IsInstanceOf(typeof(IoK8sApimachineryPkgApisMetaV1Status), response, "response is IoK8sApimachineryPkgApisMetaV1Status");
        }
        
        /// <summary>
        /// Test DeleteClusterStack
        /// </summary>
        [Test]
        public void DeleteClusterStackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
            //var response = instance.DeleteClusterStack(name, gracePeriodSeconds, orphanDependents, propagationPolicy, body);
            //Assert.IsInstanceOf(typeof(IoK8sApimachineryPkgApisMetaV1Status), response, "response is IoK8sApimachineryPkgApisMetaV1Status");
        }
        
        /// <summary>
        /// Test DeleteClusterStore
        /// </summary>
        [Test]
        public void DeleteClusterStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
            //var response = instance.DeleteClusterStore(name, gracePeriodSeconds, orphanDependents, propagationPolicy, body);
            //Assert.IsInstanceOf(typeof(IoK8sApimachineryPkgApisMetaV1Status), response, "response is IoK8sApimachineryPkgApisMetaV1Status");
        }
        
        /// <summary>
        /// Test DeleteImage
        /// </summary>
        [Test]
        public void DeleteImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
            //var response = instance.DeleteImage(_namespace, name, gracePeriodSeconds, orphanDependents, propagationPolicy, body);
            //Assert.IsInstanceOf(typeof(IoK8sApimachineryPkgApisMetaV1Status), response, "response is IoK8sApimachineryPkgApisMetaV1Status");
        }
        
        /// <summary>
        /// Test DeleteSourceResolver
        /// </summary>
        [Test]
        public void DeleteSourceResolverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
            //var response = instance.DeleteSourceResolver(_namespace, name, gracePeriodSeconds, orphanDependents, propagationPolicy, body);
            //Assert.IsInstanceOf(typeof(IoK8sApimachineryPkgApisMetaV1Status), response, "response is IoK8sApimachineryPkgApisMetaV1Status");
        }
        
        /// <summary>
        /// Test GetBuild
        /// </summary>
        [Test]
        public void GetBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetBuild(_namespace, name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Build), response, "response is KpackBuildV1alpha1Build");
        }
        
        /// <summary>
        /// Test GetBuildStatus
        /// </summary>
        [Test]
        public void GetBuildStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetBuildStatus(_namespace, name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Build), response, "response is KpackBuildV1alpha1Build");
        }
        
        /// <summary>
        /// Test GetBuilder
        /// </summary>
        [Test]
        public void GetBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetBuilder(_namespace, name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Builder), response, "response is KpackBuildV1alpha1Builder");
        }
        
        /// <summary>
        /// Test GetBuilderStatus
        /// </summary>
        [Test]
        public void GetBuilderStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetBuilderStatus(_namespace, name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Builder), response, "response is KpackBuildV1alpha1Builder");
        }
        
        /// <summary>
        /// Test GetClusterBuilder
        /// </summary>
        [Test]
        public void GetClusterBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetClusterBuilder(name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterBuilder), response, "response is KpackBuildV1alpha1ClusterBuilder");
        }
        
        /// <summary>
        /// Test GetClusterBuilderStatus
        /// </summary>
        [Test]
        public void GetClusterBuilderStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetClusterBuilderStatus(name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterBuilder), response, "response is KpackBuildV1alpha1ClusterBuilder");
        }
        
        /// <summary>
        /// Test GetClusterStack
        /// </summary>
        [Test]
        public void GetClusterStackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetClusterStack(name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStack), response, "response is KpackBuildV1alpha1ClusterStack");
        }
        
        /// <summary>
        /// Test GetClusterStackStatus
        /// </summary>
        [Test]
        public void GetClusterStackStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetClusterStackStatus(name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStack), response, "response is KpackBuildV1alpha1ClusterStack");
        }
        
        /// <summary>
        /// Test GetClusterStore
        /// </summary>
        [Test]
        public void GetClusterStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetClusterStore(name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStore), response, "response is KpackBuildV1alpha1ClusterStore");
        }
        
        /// <summary>
        /// Test GetClusterStoreStatus
        /// </summary>
        [Test]
        public void GetClusterStoreStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetClusterStoreStatus(name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStore), response, "response is KpackBuildV1alpha1ClusterStore");
        }
        
        /// <summary>
        /// Test GetImage
        /// </summary>
        [Test]
        public void GetImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetImage(_namespace, name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Image), response, "response is KpackBuildV1alpha1Image");
        }
        
        /// <summary>
        /// Test GetImageStatus
        /// </summary>
        [Test]
        public void GetImageStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetImageStatus(_namespace, name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Image), response, "response is KpackBuildV1alpha1Image");
        }
        
        /// <summary>
        /// Test GetSourceResolver
        /// </summary>
        [Test]
        public void GetSourceResolverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetSourceResolver(_namespace, name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolver), response, "response is KpackBuildV1alpha1SourceResolver");
        }
        
        /// <summary>
        /// Test GetSourceResolverStatus
        /// </summary>
        [Test]
        public void GetSourceResolverStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //var response = instance.GetSourceResolverStatus(_namespace, name);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolver), response, "response is KpackBuildV1alpha1SourceResolver");
        }
        
        /// <summary>
        /// Test ListAllBuilders
        /// </summary>
        [Test]
        public void ListAllBuildersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListAllBuilders(pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1BuilderList), response, "response is KpackBuildV1alpha1BuilderList");
        }
        
        /// <summary>
        /// Test ListAllBuilds
        /// </summary>
        [Test]
        public void ListAllBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListAllBuilds(pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1BuildList), response, "response is KpackBuildV1alpha1BuildList");
        }
        
        /// <summary>
        /// Test ListAllClusterbuilders
        /// </summary>
        [Test]
        public void ListAllClusterbuildersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListAllClusterbuilders(pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterBuilderList), response, "response is KpackBuildV1alpha1ClusterBuilderList");
        }
        
        /// <summary>
        /// Test ListAllClusterstacks
        /// </summary>
        [Test]
        public void ListAllClusterstacksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListAllClusterstacks(pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStackList), response, "response is KpackBuildV1alpha1ClusterStackList");
        }
        
        /// <summary>
        /// Test ListAllClusterstores
        /// </summary>
        [Test]
        public void ListAllClusterstoresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListAllClusterstores(pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStoreList), response, "response is KpackBuildV1alpha1ClusterStoreList");
        }
        
        /// <summary>
        /// Test ListAllImages
        /// </summary>
        [Test]
        public void ListAllImagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListAllImages(pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ImageList), response, "response is KpackBuildV1alpha1ImageList");
        }
        
        /// <summary>
        /// Test ListAllSourceresolvers
        /// </summary>
        [Test]
        public void ListAllSourceresolversTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListAllSourceresolvers(pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolverList), response, "response is KpackBuildV1alpha1SourceResolverList");
        }
        
        /// <summary>
        /// Test ListNamespacedBuilders
        /// </summary>
        [Test]
        public void ListNamespacedBuildersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedBuilders(_namespace, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1BuilderList), response, "response is KpackBuildV1alpha1BuilderList");
        }
        
        /// <summary>
        /// Test ListNamespacedBuilds
        /// </summary>
        [Test]
        public void ListNamespacedBuildsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedBuilds(_namespace, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1BuildList), response, "response is KpackBuildV1alpha1BuildList");
        }
        
        /// <summary>
        /// Test ListNamespacedImages
        /// </summary>
        [Test]
        public void ListNamespacedImagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedImages(_namespace, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ImageList), response, "response is KpackBuildV1alpha1ImageList");
        }
        
        /// <summary>
        /// Test ListNamespacedSourceresolvers
        /// </summary>
        [Test]
        public void ListNamespacedSourceresolversTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string _continue = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //int? limit = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedSourceresolvers(_namespace, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolverList), response, "response is KpackBuildV1alpha1SourceResolverList");
        }
        
        /// <summary>
        /// Test PatchBuild
        /// </summary>
        [Test]
        public void PatchBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //Object body = null;
            //var response = instance.PatchBuild(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Build), response, "response is KpackBuildV1alpha1Build");
        }
        
        /// <summary>
        /// Test PatchBuildStatus
        /// </summary>
        [Test]
        public void PatchBuildStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //Object body = null;
            //var response = instance.PatchBuildStatus(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Build), response, "response is KpackBuildV1alpha1Build");
        }
        
        /// <summary>
        /// Test PatchBuilder
        /// </summary>
        [Test]
        public void PatchBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //Object body = null;
            //var response = instance.PatchBuilder(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Builder), response, "response is KpackBuildV1alpha1Builder");
        }
        
        /// <summary>
        /// Test PatchBuilderStatus
        /// </summary>
        [Test]
        public void PatchBuilderStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //Object body = null;
            //var response = instance.PatchBuilderStatus(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Builder), response, "response is KpackBuildV1alpha1Builder");
        }
        
        /// <summary>
        /// Test PatchClusterBuilder
        /// </summary>
        [Test]
        public void PatchClusterBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //var response = instance.PatchClusterBuilder(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterBuilder), response, "response is KpackBuildV1alpha1ClusterBuilder");
        }
        
        /// <summary>
        /// Test PatchClusterBuilderStatus
        /// </summary>
        [Test]
        public void PatchClusterBuilderStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //var response = instance.PatchClusterBuilderStatus(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterBuilder), response, "response is KpackBuildV1alpha1ClusterBuilder");
        }
        
        /// <summary>
        /// Test PatchClusterStack
        /// </summary>
        [Test]
        public void PatchClusterStackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //var response = instance.PatchClusterStack(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStack), response, "response is KpackBuildV1alpha1ClusterStack");
        }
        
        /// <summary>
        /// Test PatchClusterStackStatus
        /// </summary>
        [Test]
        public void PatchClusterStackStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //var response = instance.PatchClusterStackStatus(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStack), response, "response is KpackBuildV1alpha1ClusterStack");
        }
        
        /// <summary>
        /// Test PatchClusterStore
        /// </summary>
        [Test]
        public void PatchClusterStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //var response = instance.PatchClusterStore(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStore), response, "response is KpackBuildV1alpha1ClusterStore");
        }
        
        /// <summary>
        /// Test PatchClusterStoreStatus
        /// </summary>
        [Test]
        public void PatchClusterStoreStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //var response = instance.PatchClusterStoreStatus(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStore), response, "response is KpackBuildV1alpha1ClusterStore");
        }
        
        /// <summary>
        /// Test PatchImage
        /// </summary>
        [Test]
        public void PatchImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //Object body = null;
            //var response = instance.PatchImage(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Image), response, "response is KpackBuildV1alpha1Image");
        }
        
        /// <summary>
        /// Test PatchImageStatus
        /// </summary>
        [Test]
        public void PatchImageStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //Object body = null;
            //var response = instance.PatchImageStatus(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Image), response, "response is KpackBuildV1alpha1Image");
        }
        
        /// <summary>
        /// Test PatchSourceResolver
        /// </summary>
        [Test]
        public void PatchSourceResolverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //Object body = null;
            //var response = instance.PatchSourceResolver(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolver), response, "response is KpackBuildV1alpha1SourceResolver");
        }
        
        /// <summary>
        /// Test PatchSourceResolverStatus
        /// </summary>
        [Test]
        public void PatchSourceResolverStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //Object body = null;
            //var response = instance.PatchSourceResolverStatus(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolver), response, "response is KpackBuildV1alpha1SourceResolver");
        }
        
        /// <summary>
        /// Test ReplaceBuild
        /// </summary>
        [Test]
        public void ReplaceBuildTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //KpackBuildV1alpha1Build body = null;
            //var response = instance.ReplaceBuild(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Build), response, "response is KpackBuildV1alpha1Build");
        }
        
        /// <summary>
        /// Test ReplaceBuildStatus
        /// </summary>
        [Test]
        public void ReplaceBuildStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //KpackBuildV1alpha1Build body = null;
            //var response = instance.ReplaceBuildStatus(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Build), response, "response is KpackBuildV1alpha1Build");
        }
        
        /// <summary>
        /// Test ReplaceBuilder
        /// </summary>
        [Test]
        public void ReplaceBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //KpackBuildV1alpha1Builder body = null;
            //var response = instance.ReplaceBuilder(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Builder), response, "response is KpackBuildV1alpha1Builder");
        }
        
        /// <summary>
        /// Test ReplaceBuilderStatus
        /// </summary>
        [Test]
        public void ReplaceBuilderStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //KpackBuildV1alpha1Builder body = null;
            //var response = instance.ReplaceBuilderStatus(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Builder), response, "response is KpackBuildV1alpha1Builder");
        }
        
        /// <summary>
        /// Test ReplaceClusterBuilder
        /// </summary>
        [Test]
        public void ReplaceClusterBuilderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KpackBuildV1alpha1ClusterBuilder body = null;
            //var response = instance.ReplaceClusterBuilder(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterBuilder), response, "response is KpackBuildV1alpha1ClusterBuilder");
        }
        
        /// <summary>
        /// Test ReplaceClusterBuilderStatus
        /// </summary>
        [Test]
        public void ReplaceClusterBuilderStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KpackBuildV1alpha1ClusterBuilder body = null;
            //var response = instance.ReplaceClusterBuilderStatus(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterBuilder), response, "response is KpackBuildV1alpha1ClusterBuilder");
        }
        
        /// <summary>
        /// Test ReplaceClusterStack
        /// </summary>
        [Test]
        public void ReplaceClusterStackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KpackBuildV1alpha1ClusterStack body = null;
            //var response = instance.ReplaceClusterStack(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStack), response, "response is KpackBuildV1alpha1ClusterStack");
        }
        
        /// <summary>
        /// Test ReplaceClusterStackStatus
        /// </summary>
        [Test]
        public void ReplaceClusterStackStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KpackBuildV1alpha1ClusterStack body = null;
            //var response = instance.ReplaceClusterStackStatus(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStack), response, "response is KpackBuildV1alpha1ClusterStack");
        }
        
        /// <summary>
        /// Test ReplaceClusterStore
        /// </summary>
        [Test]
        public void ReplaceClusterStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KpackBuildV1alpha1ClusterStore body = null;
            //var response = instance.ReplaceClusterStore(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStore), response, "response is KpackBuildV1alpha1ClusterStore");
        }
        
        /// <summary>
        /// Test ReplaceClusterStoreStatus
        /// </summary>
        [Test]
        public void ReplaceClusterStoreStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KpackBuildV1alpha1ClusterStore body = null;
            //var response = instance.ReplaceClusterStoreStatus(name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1ClusterStore), response, "response is KpackBuildV1alpha1ClusterStore");
        }
        
        /// <summary>
        /// Test ReplaceImage
        /// </summary>
        [Test]
        public void ReplaceImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //KpackBuildV1alpha1Image body = null;
            //var response = instance.ReplaceImage(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Image), response, "response is KpackBuildV1alpha1Image");
        }
        
        /// <summary>
        /// Test ReplaceImageStatus
        /// </summary>
        [Test]
        public void ReplaceImageStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //KpackBuildV1alpha1Image body = null;
            //var response = instance.ReplaceImageStatus(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1Image), response, "response is KpackBuildV1alpha1Image");
        }
        
        /// <summary>
        /// Test ReplaceSourceResolver
        /// </summary>
        [Test]
        public void ReplaceSourceResolverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //KpackBuildV1alpha1SourceResolver body = null;
            //var response = instance.ReplaceSourceResolver(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolver), response, "response is KpackBuildV1alpha1SourceResolver");
        }
        
        /// <summary>
        /// Test ReplaceSourceResolverStatus
        /// </summary>
        [Test]
        public void ReplaceSourceResolverStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string name = null;
            //KpackBuildV1alpha1SourceResolver body = null;
            //var response = instance.ReplaceSourceResolverStatus(_namespace, name, body);
            //Assert.IsInstanceOf(typeof(KpackBuildV1alpha1SourceResolver), response, "response is KpackBuildV1alpha1SourceResolver");
        }
        
    }

}
