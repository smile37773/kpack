/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KpackBuildV1alpha1ResolvedSourceConfig
    /// </summary>
    [DataContract]
    public partial class KpackBuildV1alpha1ResolvedSourceConfig :  IEquatable<KpackBuildV1alpha1ResolvedSourceConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackBuildV1alpha1ResolvedSourceConfig" /> class.
        /// </summary>
        /// <param name="blob">blob.</param>
        /// <param name="git">git.</param>
        /// <param name="registry">registry.</param>
        public KpackBuildV1alpha1ResolvedSourceConfig(KpackBuildV1alpha1ResolvedBlobSource blob = default(KpackBuildV1alpha1ResolvedBlobSource), KpackBuildV1alpha1ResolvedGitSource git = default(KpackBuildV1alpha1ResolvedGitSource), KpackBuildV1alpha1ResolvedRegistrySource registry = default(KpackBuildV1alpha1ResolvedRegistrySource))
        {
            this.Blob = blob;
            this.Git = git;
            this.Registry = registry;
        }
        
        /// <summary>
        /// Gets or Sets Blob
        /// </summary>
        [DataMember(Name="blob", EmitDefaultValue=false)]
        public KpackBuildV1alpha1ResolvedBlobSource Blob { get; set; }

        /// <summary>
        /// Gets or Sets Git
        /// </summary>
        [DataMember(Name="git", EmitDefaultValue=false)]
        public KpackBuildV1alpha1ResolvedGitSource Git { get; set; }

        /// <summary>
        /// Gets or Sets Registry
        /// </summary>
        [DataMember(Name="registry", EmitDefaultValue=false)]
        public KpackBuildV1alpha1ResolvedRegistrySource Registry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KpackBuildV1alpha1ResolvedSourceConfig {\n");
            sb.Append("  Blob: ").Append(Blob).Append("\n");
            sb.Append("  Git: ").Append(Git).Append("\n");
            sb.Append("  Registry: ").Append(Registry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KpackBuildV1alpha1ResolvedSourceConfig);
        }

        /// <summary>
        /// Returns true if KpackBuildV1alpha1ResolvedSourceConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of KpackBuildV1alpha1ResolvedSourceConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KpackBuildV1alpha1ResolvedSourceConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Blob == input.Blob ||
                    (this.Blob != null &&
                    this.Blob.Equals(input.Blob))
                ) && 
                (
                    this.Git == input.Git ||
                    (this.Git != null &&
                    this.Git.Equals(input.Git))
                ) && 
                (
                    this.Registry == input.Registry ||
                    (this.Registry != null &&
                    this.Registry.Equals(input.Registry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blob != null)
                    hashCode = hashCode * 59 + this.Blob.GetHashCode();
                if (this.Git != null)
                    hashCode = hashCode * 59 + this.Git.GetHashCode();
                if (this.Registry != null)
                    hashCode = hashCode * 59 + this.Registry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
