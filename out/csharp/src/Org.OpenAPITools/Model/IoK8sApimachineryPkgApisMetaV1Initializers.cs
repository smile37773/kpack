/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Initializers tracks the progress of initialization.
    /// </summary>
    [DataContract]
    public partial class IoK8sApimachineryPkgApisMetaV1Initializers :  IEquatable<IoK8sApimachineryPkgApisMetaV1Initializers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApimachineryPkgApisMetaV1Initializers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApimachineryPkgApisMetaV1Initializers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApimachineryPkgApisMetaV1Initializers" /> class.
        /// </summary>
        /// <param name="pending">Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients. (required).</param>
        /// <param name="result">result.</param>
        public IoK8sApimachineryPkgApisMetaV1Initializers(List<IoK8sApimachineryPkgApisMetaV1Initializer> pending = default(List<IoK8sApimachineryPkgApisMetaV1Initializer>), IoK8sApimachineryPkgApisMetaV1Status result = default(IoK8sApimachineryPkgApisMetaV1Status))
        {
            // to ensure "pending" is required (not null)
            if (pending == null)
            {
                throw new InvalidDataException("pending is a required property for IoK8sApimachineryPkgApisMetaV1Initializers and cannot be null");
            }
            else
            {
                this.Pending = pending;
            }
            
            this.Result = result;
        }
        
        /// <summary>
        /// Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
        /// </summary>
        /// <value>Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.</value>
        [DataMember(Name="pending", EmitDefaultValue=true)]
        public List<IoK8sApimachineryPkgApisMetaV1Initializer> Pending { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public IoK8sApimachineryPkgApisMetaV1Status Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IoK8sApimachineryPkgApisMetaV1Initializers {\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IoK8sApimachineryPkgApisMetaV1Initializers);
        }

        /// <summary>
        /// Returns true if IoK8sApimachineryPkgApisMetaV1Initializers instances are equal
        /// </summary>
        /// <param name="input">Instance of IoK8sApimachineryPkgApisMetaV1Initializers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IoK8sApimachineryPkgApisMetaV1Initializers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pending == input.Pending ||
                    this.Pending != null &&
                    input.Pending != null &&
                    this.Pending.SequenceEqual(input.Pending)
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pending != null)
                    hashCode = hashCode * 59 + this.Pending.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
