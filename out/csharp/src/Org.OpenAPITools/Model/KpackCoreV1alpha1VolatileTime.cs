/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VolatileTime wraps metav1.Time
    /// </summary>
    [DataContract]
    public partial class KpackCoreV1alpha1VolatileTime :  IEquatable<KpackCoreV1alpha1VolatileTime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackCoreV1alpha1VolatileTime" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KpackCoreV1alpha1VolatileTime() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackCoreV1alpha1VolatileTime" /> class.
        /// </summary>
        /// <param name="inner">Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers. (required).</param>
        public KpackCoreV1alpha1VolatileTime(DateTime inner = default(DateTime))
        {
            // to ensure "inner" is required (not null)
            if (inner == null)
            {
                throw new InvalidDataException("inner is a required property for KpackCoreV1alpha1VolatileTime and cannot be null");
            }
            else
            {
                this.Inner = inner;
            }
            
        }
        
        /// <summary>
        /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
        /// </summary>
        /// <value>Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.</value>
        [DataMember(Name="inner", EmitDefaultValue=true)]
        public DateTime Inner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KpackCoreV1alpha1VolatileTime {\n");
            sb.Append("  Inner: ").Append(Inner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KpackCoreV1alpha1VolatileTime);
        }

        /// <summary>
        /// Returns true if KpackCoreV1alpha1VolatileTime instances are equal
        /// </summary>
        /// <param name="input">Instance of KpackCoreV1alpha1VolatileTime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KpackCoreV1alpha1VolatileTime input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Inner == input.Inner ||
                    (this.Inner != null &&
                    this.Inner.Equals(input.Inner))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inner != null)
                    hashCode = hashCode * 59 + this.Inner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
