/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContainerStateTerminated is a terminated state of a container.
    /// </summary>
    [DataContract]
    public partial class IoK8sApiCoreV1ContainerStateTerminated :  IEquatable<IoK8sApiCoreV1ContainerStateTerminated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1ContainerStateTerminated" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IoK8sApiCoreV1ContainerStateTerminated() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1ContainerStateTerminated" /> class.
        /// </summary>
        /// <param name="containerID">Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;.</param>
        /// <param name="exitCode">Exit status from the last termination of the container (required).</param>
        /// <param name="finishedAt">Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers..</param>
        /// <param name="message">Message regarding the last termination of the container.</param>
        /// <param name="reason">(brief) reason from the last termination of the container.</param>
        /// <param name="signal">Signal from the last termination of the container.</param>
        /// <param name="startedAt">Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers..</param>
        public IoK8sApiCoreV1ContainerStateTerminated(string containerID = default(string), int exitCode = default(int), DateTime finishedAt = default(DateTime), string message = default(string), string reason = default(string), int signal = default(int), DateTime startedAt = default(DateTime))
        {
            // to ensure "exitCode" is required (not null)
            if (exitCode == null)
            {
                throw new InvalidDataException("exitCode is a required property for IoK8sApiCoreV1ContainerStateTerminated and cannot be null");
            }
            else
            {
                this.ExitCode = exitCode;
            }
            
            this.ContainerID = containerID;
            this.FinishedAt = finishedAt;
            this.Message = message;
            this.Reason = reason;
            this.Signal = signal;
            this.StartedAt = startedAt;
        }
        
        /// <summary>
        /// Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;
        /// </summary>
        /// <value>Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;</value>
        [DataMember(Name="containerID", EmitDefaultValue=false)]
        public string ContainerID { get; set; }

        /// <summary>
        /// Exit status from the last termination of the container
        /// </summary>
        /// <value>Exit status from the last termination of the container</value>
        [DataMember(Name="exitCode", EmitDefaultValue=true)]
        public int ExitCode { get; set; }

        /// <summary>
        /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
        /// </summary>
        /// <value>Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.</value>
        [DataMember(Name="finishedAt", EmitDefaultValue=false)]
        public DateTime FinishedAt { get; set; }

        /// <summary>
        /// Message regarding the last termination of the container
        /// </summary>
        /// <value>Message regarding the last termination of the container</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// (brief) reason from the last termination of the container
        /// </summary>
        /// <value>(brief) reason from the last termination of the container</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Signal from the last termination of the container
        /// </summary>
        /// <value>Signal from the last termination of the container</value>
        [DataMember(Name="signal", EmitDefaultValue=false)]
        public int Signal { get; set; }

        /// <summary>
        /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
        /// </summary>
        /// <value>Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.</value>
        [DataMember(Name="startedAt", EmitDefaultValue=false)]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1ContainerStateTerminated {\n");
            sb.Append("  ContainerID: ").Append(ContainerID).Append("\n");
            sb.Append("  ExitCode: ").Append(ExitCode).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Signal: ").Append(Signal).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IoK8sApiCoreV1ContainerStateTerminated);
        }

        /// <summary>
        /// Returns true if IoK8sApiCoreV1ContainerStateTerminated instances are equal
        /// </summary>
        /// <param name="input">Instance of IoK8sApiCoreV1ContainerStateTerminated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IoK8sApiCoreV1ContainerStateTerminated input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerID == input.ContainerID ||
                    (this.ContainerID != null &&
                    this.ContainerID.Equals(input.ContainerID))
                ) && 
                (
                    this.ExitCode == input.ExitCode ||
                    (this.ExitCode != null &&
                    this.ExitCode.Equals(input.ExitCode))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Signal == input.Signal ||
                    (this.Signal != null &&
                    this.Signal.Equals(input.Signal))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerID != null)
                    hashCode = hashCode * 59 + this.ContainerID.GetHashCode();
                if (this.ExitCode != null)
                    hashCode = hashCode * 59 + this.ExitCode.GetHashCode();
                if (this.FinishedAt != null)
                    hashCode = hashCode * 59 + this.FinishedAt.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Signal != null)
                    hashCode = hashCode * 59 + this.Signal.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
