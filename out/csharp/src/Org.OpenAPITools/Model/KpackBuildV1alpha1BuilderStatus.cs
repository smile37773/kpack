/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KpackBuildV1alpha1BuilderStatus
    /// </summary>
    [DataContract]
    public partial class KpackBuildV1alpha1BuilderStatus :  IEquatable<KpackBuildV1alpha1BuilderStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackBuildV1alpha1BuilderStatus" /> class.
        /// </summary>
        /// <param name="builderMetadata">builderMetadata.</param>
        /// <param name="conditions">Conditions the latest available observations of a resource&#39;s current state..</param>
        /// <param name="latestImage">latestImage.</param>
        /// <param name="observedGeneration">ObservedGeneration is the &#39;Generation&#39; of the Service that was last processed by the controller..</param>
        /// <param name="stack">stack.</param>
        public KpackBuildV1alpha1BuilderStatus(List<KpackBuildV1alpha1BuildpackMetadata> builderMetadata = default(List<KpackBuildV1alpha1BuildpackMetadata>), List<KpackCoreV1alpha1Condition> conditions = default(List<KpackCoreV1alpha1Condition>), string latestImage = default(string), long observedGeneration = default(long), KpackBuildV1alpha1BuildStack stack = default(KpackBuildV1alpha1BuildStack))
        {
            this.BuilderMetadata = builderMetadata;
            this.Conditions = conditions;
            this.LatestImage = latestImage;
            this.ObservedGeneration = observedGeneration;
            this.Stack = stack;
        }
        
        /// <summary>
        /// Gets or Sets BuilderMetadata
        /// </summary>
        [DataMember(Name="builderMetadata", EmitDefaultValue=false)]
        public List<KpackBuildV1alpha1BuildpackMetadata> BuilderMetadata { get; set; }

        /// <summary>
        /// Conditions the latest available observations of a resource&#39;s current state.
        /// </summary>
        /// <value>Conditions the latest available observations of a resource&#39;s current state.</value>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<KpackCoreV1alpha1Condition> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets LatestImage
        /// </summary>
        [DataMember(Name="latestImage", EmitDefaultValue=false)]
        public string LatestImage { get; set; }

        /// <summary>
        /// ObservedGeneration is the &#39;Generation&#39; of the Service that was last processed by the controller.
        /// </summary>
        /// <value>ObservedGeneration is the &#39;Generation&#39; of the Service that was last processed by the controller.</value>
        [DataMember(Name="observedGeneration", EmitDefaultValue=false)]
        public long ObservedGeneration { get; set; }

        /// <summary>
        /// Gets or Sets Stack
        /// </summary>
        [DataMember(Name="stack", EmitDefaultValue=false)]
        public KpackBuildV1alpha1BuildStack Stack { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KpackBuildV1alpha1BuilderStatus {\n");
            sb.Append("  BuilderMetadata: ").Append(BuilderMetadata).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  LatestImage: ").Append(LatestImage).Append("\n");
            sb.Append("  ObservedGeneration: ").Append(ObservedGeneration).Append("\n");
            sb.Append("  Stack: ").Append(Stack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KpackBuildV1alpha1BuilderStatus);
        }

        /// <summary>
        /// Returns true if KpackBuildV1alpha1BuilderStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of KpackBuildV1alpha1BuilderStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KpackBuildV1alpha1BuilderStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuilderMetadata == input.BuilderMetadata ||
                    this.BuilderMetadata != null &&
                    input.BuilderMetadata != null &&
                    this.BuilderMetadata.SequenceEqual(input.BuilderMetadata)
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    input.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                ) && 
                (
                    this.LatestImage == input.LatestImage ||
                    (this.LatestImage != null &&
                    this.LatestImage.Equals(input.LatestImage))
                ) && 
                (
                    this.ObservedGeneration == input.ObservedGeneration ||
                    (this.ObservedGeneration != null &&
                    this.ObservedGeneration.Equals(input.ObservedGeneration))
                ) && 
                (
                    this.Stack == input.Stack ||
                    (this.Stack != null &&
                    this.Stack.Equals(input.Stack))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuilderMetadata != null)
                    hashCode = hashCode * 59 + this.BuilderMetadata.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                if (this.LatestImage != null)
                    hashCode = hashCode * 59 + this.LatestImage.GetHashCode();
                if (this.ObservedGeneration != null)
                    hashCode = hashCode * 59 + this.ObservedGeneration.GetHashCode();
                if (this.Stack != null)
                    hashCode = hashCode * 59 + this.Stack.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
