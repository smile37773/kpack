/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
    /// </summary>
    [DataContract]
    public partial class IoK8sApimachineryPkgApisMetaV1StatusDetails :  IEquatable<IoK8sApimachineryPkgApisMetaV1StatusDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApimachineryPkgApisMetaV1StatusDetails" /> class.
        /// </summary>
        /// <param name="causes">The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes..</param>
        /// <param name="group">The group attribute of the resource associated with the status StatusReason..</param>
        /// <param name="kind">The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds.</param>
        /// <param name="name">The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)..</param>
        /// <param name="retryAfterSeconds">If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action..</param>
        /// <param name="uid">UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids.</param>
        public IoK8sApimachineryPkgApisMetaV1StatusDetails(List<IoK8sApimachineryPkgApisMetaV1StatusCause> causes = default(List<IoK8sApimachineryPkgApisMetaV1StatusCause>), string group = default(string), string kind = default(string), string name = default(string), int retryAfterSeconds = default(int), string uid = default(string))
        {
            this.Causes = causes;
            this.Group = group;
            this.Kind = kind;
            this.Name = name;
            this.RetryAfterSeconds = retryAfterSeconds;
            this.Uid = uid;
        }
        
        /// <summary>
        /// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
        /// </summary>
        /// <value>The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.</value>
        [DataMember(Name="causes", EmitDefaultValue=false)]
        public List<IoK8sApimachineryPkgApisMetaV1StatusCause> Causes { get; set; }

        /// <summary>
        /// The group attribute of the resource associated with the status StatusReason.
        /// </summary>
        /// <value>The group attribute of the resource associated with the status StatusReason.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        /// <value>The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
        /// </summary>
        /// <value>The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
        /// </summary>
        /// <value>If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.</value>
        [DataMember(Name="retryAfterSeconds", EmitDefaultValue=false)]
        public int RetryAfterSeconds { get; set; }

        /// <summary>
        /// UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        /// </summary>
        /// <value>UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IoK8sApimachineryPkgApisMetaV1StatusDetails {\n");
            sb.Append("  Causes: ").Append(Causes).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RetryAfterSeconds: ").Append(RetryAfterSeconds).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IoK8sApimachineryPkgApisMetaV1StatusDetails);
        }

        /// <summary>
        /// Returns true if IoK8sApimachineryPkgApisMetaV1StatusDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of IoK8sApimachineryPkgApisMetaV1StatusDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IoK8sApimachineryPkgApisMetaV1StatusDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Causes == input.Causes ||
                    this.Causes != null &&
                    input.Causes != null &&
                    this.Causes.SequenceEqual(input.Causes)
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Kind == input.Kind ||
                    (this.Kind != null &&
                    this.Kind.Equals(input.Kind))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RetryAfterSeconds == input.RetryAfterSeconds ||
                    (this.RetryAfterSeconds != null &&
                    this.RetryAfterSeconds.Equals(input.RetryAfterSeconds))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Causes != null)
                    hashCode = hashCode * 59 + this.Causes.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Kind != null)
                    hashCode = hashCode * 59 + this.Kind.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RetryAfterSeconds != null)
                    hashCode = hashCode * 59 + this.RetryAfterSeconds.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
