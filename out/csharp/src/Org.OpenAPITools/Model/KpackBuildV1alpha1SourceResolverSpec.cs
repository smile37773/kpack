/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KpackBuildV1alpha1SourceResolverSpec
    /// </summary>
    [DataContract]
    public partial class KpackBuildV1alpha1SourceResolverSpec :  IEquatable<KpackBuildV1alpha1SourceResolverSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackBuildV1alpha1SourceResolverSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KpackBuildV1alpha1SourceResolverSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackBuildV1alpha1SourceResolverSpec" /> class.
        /// </summary>
        /// <param name="serviceAccount">serviceAccount.</param>
        /// <param name="source">source (required).</param>
        public KpackBuildV1alpha1SourceResolverSpec(string serviceAccount = default(string), KpackBuildV1alpha1SourceConfig source = default(KpackBuildV1alpha1SourceConfig))
        {
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for KpackBuildV1alpha1SourceResolverSpec and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            
            this.ServiceAccount = serviceAccount;
        }
        
        /// <summary>
        /// Gets or Sets ServiceAccount
        /// </summary>
        [DataMember(Name="serviceAccount", EmitDefaultValue=false)]
        public string ServiceAccount { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public KpackBuildV1alpha1SourceConfig Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KpackBuildV1alpha1SourceResolverSpec {\n");
            sb.Append("  ServiceAccount: ").Append(ServiceAccount).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KpackBuildV1alpha1SourceResolverSpec);
        }

        /// <summary>
        /// Returns true if KpackBuildV1alpha1SourceResolverSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of KpackBuildV1alpha1SourceResolverSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KpackBuildV1alpha1SourceResolverSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceAccount == input.ServiceAccount ||
                    (this.ServiceAccount != null &&
                    this.ServiceAccount.Equals(input.ServiceAccount))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceAccount != null)
                    hashCode = hashCode * 59 + this.ServiceAccount.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
