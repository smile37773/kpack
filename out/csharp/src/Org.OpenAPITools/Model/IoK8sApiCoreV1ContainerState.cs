/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
    /// </summary>
    [DataContract]
    public partial class IoK8sApiCoreV1ContainerState :  IEquatable<IoK8sApiCoreV1ContainerState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IoK8sApiCoreV1ContainerState" /> class.
        /// </summary>
        /// <param name="running">running.</param>
        /// <param name="terminated">terminated.</param>
        /// <param name="waiting">waiting.</param>
        public IoK8sApiCoreV1ContainerState(IoK8sApiCoreV1ContainerStateRunning running = default(IoK8sApiCoreV1ContainerStateRunning), IoK8sApiCoreV1ContainerStateTerminated terminated = default(IoK8sApiCoreV1ContainerStateTerminated), IoK8sApiCoreV1ContainerStateWaiting waiting = default(IoK8sApiCoreV1ContainerStateWaiting))
        {
            this.Running = running;
            this.Terminated = terminated;
            this.Waiting = waiting;
        }
        
        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name="running", EmitDefaultValue=false)]
        public IoK8sApiCoreV1ContainerStateRunning Running { get; set; }

        /// <summary>
        /// Gets or Sets Terminated
        /// </summary>
        [DataMember(Name="terminated", EmitDefaultValue=false)]
        public IoK8sApiCoreV1ContainerStateTerminated Terminated { get; set; }

        /// <summary>
        /// Gets or Sets Waiting
        /// </summary>
        [DataMember(Name="waiting", EmitDefaultValue=false)]
        public IoK8sApiCoreV1ContainerStateWaiting Waiting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IoK8sApiCoreV1ContainerState {\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  Terminated: ").Append(Terminated).Append("\n");
            sb.Append("  Waiting: ").Append(Waiting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IoK8sApiCoreV1ContainerState);
        }

        /// <summary>
        /// Returns true if IoK8sApiCoreV1ContainerState instances are equal
        /// </summary>
        /// <param name="input">Instance of IoK8sApiCoreV1ContainerState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IoK8sApiCoreV1ContainerState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Running == input.Running ||
                    (this.Running != null &&
                    this.Running.Equals(input.Running))
                ) && 
                (
                    this.Terminated == input.Terminated ||
                    (this.Terminated != null &&
                    this.Terminated.Equals(input.Terminated))
                ) && 
                (
                    this.Waiting == input.Waiting ||
                    (this.Waiting != null &&
                    this.Waiting.Equals(input.Waiting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Running != null)
                    hashCode = hashCode * 59 + this.Running.GetHashCode();
                if (this.Terminated != null)
                    hashCode = hashCode * 59 + this.Terminated.GetHashCode();
                if (this.Waiting != null)
                    hashCode = hashCode * 59 + this.Waiting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
