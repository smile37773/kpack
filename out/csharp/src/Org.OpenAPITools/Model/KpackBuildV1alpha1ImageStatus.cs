/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KpackBuildV1alpha1ImageStatus
    /// </summary>
    [DataContract]
    public partial class KpackBuildV1alpha1ImageStatus :  IEquatable<KpackBuildV1alpha1ImageStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackBuildV1alpha1ImageStatus" /> class.
        /// </summary>
        /// <param name="buildCacheName">buildCacheName.</param>
        /// <param name="buildCounter">buildCounter.</param>
        /// <param name="conditions">Conditions the latest available observations of a resource&#39;s current state..</param>
        /// <param name="latestBuildImageGeneration">latestBuildImageGeneration.</param>
        /// <param name="latestBuildReason">latestBuildReason.</param>
        /// <param name="latestBuildRef">latestBuildRef.</param>
        /// <param name="latestImage">latestImage.</param>
        /// <param name="latestStack">latestStack.</param>
        /// <param name="observedGeneration">ObservedGeneration is the &#39;Generation&#39; of the Service that was last processed by the controller..</param>
        public KpackBuildV1alpha1ImageStatus(string buildCacheName = default(string), long buildCounter = default(long), List<KpackCoreV1alpha1Condition> conditions = default(List<KpackCoreV1alpha1Condition>), long latestBuildImageGeneration = default(long), string latestBuildReason = default(string), string latestBuildRef = default(string), string latestImage = default(string), string latestStack = default(string), long observedGeneration = default(long))
        {
            this.BuildCacheName = buildCacheName;
            this.BuildCounter = buildCounter;
            this.Conditions = conditions;
            this.LatestBuildImageGeneration = latestBuildImageGeneration;
            this.LatestBuildReason = latestBuildReason;
            this.LatestBuildRef = latestBuildRef;
            this.LatestImage = latestImage;
            this.LatestStack = latestStack;
            this.ObservedGeneration = observedGeneration;
        }
        
        /// <summary>
        /// Gets or Sets BuildCacheName
        /// </summary>
        [DataMember(Name="buildCacheName", EmitDefaultValue=false)]
        public string BuildCacheName { get; set; }

        /// <summary>
        /// Gets or Sets BuildCounter
        /// </summary>
        [DataMember(Name="buildCounter", EmitDefaultValue=false)]
        public long BuildCounter { get; set; }

        /// <summary>
        /// Conditions the latest available observations of a resource&#39;s current state.
        /// </summary>
        /// <value>Conditions the latest available observations of a resource&#39;s current state.</value>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<KpackCoreV1alpha1Condition> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets LatestBuildImageGeneration
        /// </summary>
        [DataMember(Name="latestBuildImageGeneration", EmitDefaultValue=false)]
        public long LatestBuildImageGeneration { get; set; }

        /// <summary>
        /// Gets or Sets LatestBuildReason
        /// </summary>
        [DataMember(Name="latestBuildReason", EmitDefaultValue=false)]
        public string LatestBuildReason { get; set; }

        /// <summary>
        /// Gets or Sets LatestBuildRef
        /// </summary>
        [DataMember(Name="latestBuildRef", EmitDefaultValue=false)]
        public string LatestBuildRef { get; set; }

        /// <summary>
        /// Gets or Sets LatestImage
        /// </summary>
        [DataMember(Name="latestImage", EmitDefaultValue=false)]
        public string LatestImage { get; set; }

        /// <summary>
        /// Gets or Sets LatestStack
        /// </summary>
        [DataMember(Name="latestStack", EmitDefaultValue=false)]
        public string LatestStack { get; set; }

        /// <summary>
        /// ObservedGeneration is the &#39;Generation&#39; of the Service that was last processed by the controller.
        /// </summary>
        /// <value>ObservedGeneration is the &#39;Generation&#39; of the Service that was last processed by the controller.</value>
        [DataMember(Name="observedGeneration", EmitDefaultValue=false)]
        public long ObservedGeneration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KpackBuildV1alpha1ImageStatus {\n");
            sb.Append("  BuildCacheName: ").Append(BuildCacheName).Append("\n");
            sb.Append("  BuildCounter: ").Append(BuildCounter).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  LatestBuildImageGeneration: ").Append(LatestBuildImageGeneration).Append("\n");
            sb.Append("  LatestBuildReason: ").Append(LatestBuildReason).Append("\n");
            sb.Append("  LatestBuildRef: ").Append(LatestBuildRef).Append("\n");
            sb.Append("  LatestImage: ").Append(LatestImage).Append("\n");
            sb.Append("  LatestStack: ").Append(LatestStack).Append("\n");
            sb.Append("  ObservedGeneration: ").Append(ObservedGeneration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KpackBuildV1alpha1ImageStatus);
        }

        /// <summary>
        /// Returns true if KpackBuildV1alpha1ImageStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of KpackBuildV1alpha1ImageStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KpackBuildV1alpha1ImageStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuildCacheName == input.BuildCacheName ||
                    (this.BuildCacheName != null &&
                    this.BuildCacheName.Equals(input.BuildCacheName))
                ) && 
                (
                    this.BuildCounter == input.BuildCounter ||
                    (this.BuildCounter != null &&
                    this.BuildCounter.Equals(input.BuildCounter))
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    input.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                ) && 
                (
                    this.LatestBuildImageGeneration == input.LatestBuildImageGeneration ||
                    (this.LatestBuildImageGeneration != null &&
                    this.LatestBuildImageGeneration.Equals(input.LatestBuildImageGeneration))
                ) && 
                (
                    this.LatestBuildReason == input.LatestBuildReason ||
                    (this.LatestBuildReason != null &&
                    this.LatestBuildReason.Equals(input.LatestBuildReason))
                ) && 
                (
                    this.LatestBuildRef == input.LatestBuildRef ||
                    (this.LatestBuildRef != null &&
                    this.LatestBuildRef.Equals(input.LatestBuildRef))
                ) && 
                (
                    this.LatestImage == input.LatestImage ||
                    (this.LatestImage != null &&
                    this.LatestImage.Equals(input.LatestImage))
                ) && 
                (
                    this.LatestStack == input.LatestStack ||
                    (this.LatestStack != null &&
                    this.LatestStack.Equals(input.LatestStack))
                ) && 
                (
                    this.ObservedGeneration == input.ObservedGeneration ||
                    (this.ObservedGeneration != null &&
                    this.ObservedGeneration.Equals(input.ObservedGeneration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuildCacheName != null)
                    hashCode = hashCode * 59 + this.BuildCacheName.GetHashCode();
                if (this.BuildCounter != null)
                    hashCode = hashCode * 59 + this.BuildCounter.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                if (this.LatestBuildImageGeneration != null)
                    hashCode = hashCode * 59 + this.LatestBuildImageGeneration.GetHashCode();
                if (this.LatestBuildReason != null)
                    hashCode = hashCode * 59 + this.LatestBuildReason.GetHashCode();
                if (this.LatestBuildRef != null)
                    hashCode = hashCode * 59 + this.LatestBuildRef.GetHashCode();
                if (this.LatestImage != null)
                    hashCode = hashCode * 59 + this.LatestImage.GetHashCode();
                if (this.LatestStack != null)
                    hashCode = hashCode * 59 + this.LatestStack.GetHashCode();
                if (this.ObservedGeneration != null)
                    hashCode = hashCode * 59 + this.ObservedGeneration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
