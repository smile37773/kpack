/* 
 * kpack
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Conditions defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
    /// </summary>
    [DataContract]
    public partial class KpackCoreV1alpha1Condition :  IEquatable<KpackCoreV1alpha1Condition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackCoreV1alpha1Condition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KpackCoreV1alpha1Condition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KpackCoreV1alpha1Condition" /> class.
        /// </summary>
        /// <param name="lastTransitionTime">LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant)..</param>
        /// <param name="message">A human readable message indicating details about the transition..</param>
        /// <param name="reason">The reason for the condition&#39;s last transition..</param>
        /// <param name="severity">Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error..</param>
        /// <param name="status">Status of the condition, one of True, False, Unknown. (required).</param>
        /// <param name="type">Type of condition. (required).</param>
        public KpackCoreV1alpha1Condition(string lastTransitionTime = default(string), string message = default(string), string reason = default(string), string severity = default(string), string status = default(string), string type = default(string))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for KpackCoreV1alpha1Condition and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for KpackCoreV1alpha1Condition and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            this.LastTransitionTime = lastTransitionTime;
            this.Message = message;
            this.Reason = reason;
            this.Severity = severity;
        }
        
        /// <summary>
        /// LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
        /// </summary>
        /// <value>LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).</value>
        [DataMember(Name="lastTransitionTime", EmitDefaultValue=false)]
        public string LastTransitionTime { get; set; }

        /// <summary>
        /// A human readable message indicating details about the transition.
        /// </summary>
        /// <value>A human readable message indicating details about the transition.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The reason for the condition&#39;s last transition.
        /// </summary>
        /// <value>The reason for the condition&#39;s last transition.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
        /// </summary>
        /// <value>Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public string Severity { get; set; }

        /// <summary>
        /// Status of the condition, one of True, False, Unknown.
        /// </summary>
        /// <value>Status of the condition, one of True, False, Unknown.</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public string Status { get; set; }

        /// <summary>
        /// Type of condition.
        /// </summary>
        /// <value>Type of condition.</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KpackCoreV1alpha1Condition {\n");
            sb.Append("  LastTransitionTime: ").Append(LastTransitionTime).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KpackCoreV1alpha1Condition);
        }

        /// <summary>
        /// Returns true if KpackCoreV1alpha1Condition instances are equal
        /// </summary>
        /// <param name="input">Instance of KpackCoreV1alpha1Condition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KpackCoreV1alpha1Condition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastTransitionTime == input.LastTransitionTime ||
                    (this.LastTransitionTime != null &&
                    this.LastTransitionTime.Equals(input.LastTransitionTime))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastTransitionTime != null)
                    hashCode = hashCode * 59 + this.LastTransitionTime.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
